}
}
else {
return (x$Hospital.Name[num])
}
}, num)
#Return data.frame with format
return ( data.frame(hospital=unlist(ans), state=names(ans)) )
}
source("best.R")
best <- function(state,outcome){
if(nchar(state)>2){
print("Enter State Abbreviation")
}
else
{
data<- read.csv("/Users/soumyajitsarkar/Desktop/datasciencecoursera/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses="character")
states <- unique(data$State)
# possible outcomes
outcomes <-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)){
stop("invalid state")
}
if(!(outcome %in% outcomes)){
stop("invalid outcome")
}
hospname <- NULL
#Filter data according to state
data <- data[data$State == state,]
if(outcome == "heart attack"){
data <- data[,c(2,11)]
naremove <- data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
hospname <- data$Hospital.Name[data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack==min(naremove)]
}
else if(outcome == "heart failure"){
data <- data[,c(2,17)]
naremove <- data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
naremove <- as.numeric(naremove)
naremove <- naremove[!is.na(naremove)]
hospname <- suppressWarnings(data$Hospital.Name[data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure==min(naremove)])
}
else if(outcome == "pneumonia"){
data <- data[,c(2,23)]
naremove <- data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia
naremove <- as.numeric(naremove)
naremove <- naremove[!is.na(naremove)]
hospname <- suppressWarnings(data$Hospital.Name[data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia==min(naremove)])
}
}
hospname
}
best("SC","heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital <- function(state,outcome,num = "best"){
# read data
data<- read.csv("/Users/soumyajitsarkar/Desktop/datasciencecoursera/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses="character")
states <- unique(data$State)
# possible outcomes
outcomes <-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)){
stop("invalid state")
}
if(!(outcome %in% outcomes)){
stop("invalid outcome")
}
if(class(num) == "character"){
if (! (num == "best" || num == "worst")){
stop("invalid number")
}
}
if(class(num) == "numeric" && num > nrow(data)){
return (NA)
}
#   s<-data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
#   s<- as.numeric(s)
#   s<- suppressWarnings(as.numeric(s))
#   s<-s[!is.na(s)]
data = data[data$State==state,]
# data = data[,c(11,17,23)]
if(outcome == "heart attack") {
data = data[,c(2,11)]
} else if(outcome == "heart failure") {
data = data[,c(2,17)]
} else if(outcome == "pneumonia") {
data = data[,c(2,23)]
}
names(data)[2] = "Rate"
data[, 2] = suppressWarnings( as.numeric(data[, 2]) )
data <- data[!is.na(data$Rate),]
data = data[order(data$Rate,data$Hospital.Name),]
if(class(num) == "character") {
if(num == "best") {
return (data$Hospital.Name[1])
}
else if(num == "worst") {
return (data$Hospital.Name[nrow(data)])
}
}
else {
return (data$Hospital.Name[num])
}
}
ankhospital("NC", "heart attack", "worst")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
rankall <- function(outcome, num = "best") {
## Read outcome data: COLS: HospitalName, State, HeartAttack, HearFailure, Pneumonia
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")[,c(2,7,11,17,23)]
## Check that state and outcome are valid
if(! (outcome == "heart attack" || outcome == "heart failure" || outcome == "pneumonia") ) {
stop("invalid outcome")
}
if(class(num) == "character"){
if (! (num == "best" || num == "worst")){
stop("invalid number")
}
}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the (abbreviated) state name
# Remove columns by outcome, only left HospitalName and Deaths by outcome
if(outcome == "heart attack") {
data = data[,c(1,2,3)]
} else if(outcome == "heart failure") {
data = data[,c(1,2,4)]
} else if(outcome == "pneumonia") {
data = data[,c(1,2,5)]
}
names(data)[3] = "Deaths"
data[, 3] = suppressWarnings( as.numeric(data[, 3]) )
# Remove rows with NA
data = data[!is.na(data$Deaths),]
splited = split(data, data$State)
ans = lapply(splited, function(x, num) {
# Order by Deaths and then HospitalName
x = x[order(x$Deaths, x$Hospital.Name),]
# Return
if(class(num) == "character") {
if(num == "best") {
return (x$Hospital.Name[1])
}
else if(num == "worst") {
return (x$Hospital.Name[nrow(x)])
}
}
else {
return (x$Hospital.Name[num])
}
}, num)
#Return data.frame with format
return ( data.frame(hospital=unlist(ans), state=names(ans)) )
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
rankall <- function(outcomeChr, rankObj = "best") {
outcomeDfr <- Init("Outcome-of-care-measures.csv")
suppressWarnings(outcomeDfr[, 11] <- as.numeric(outcomeDfr[, 11]))
suppressWarnings(outcomeDfr[, 17] <- as.numeric(outcomeDfr[, 17]))
suppressWarnings(outcomeDfr[, 23] <- as.numeric(outcomeDfr[, 23]))
tableDfr <- data.frame(State = names(tapply(outcomeDfr$State, outcomeDfr$State,
length)), Freq = tapply(outcomeDfr$State, outcomeDfr$State, length))
rownames(tableDfr) <- NULL
inputDfr <- data.frame(Outcome = c("heart attack", "heart failure", "pneumonia"),
Col = c(11, 17, 23))
if (nrow(inputDfr[inputDfr$Outcome == outcomeChr, ]) == 0)
stop("invalid outcome")
nameChr <- character(0)
for (stateChr in tableDfr$State) {
stateDfr <- outcomeDfr[outcomeDfr$State == stateChr, ]
colNum <- inputDfr[inputDfr$Outcome == outcomeChr, 2]
stateDfr <- stateDfr[complete.cases(stateDfr[, colNum]), ]
stateDfr <- stateDfr[order(stateDfr[, colNum], stateDfr$Hospital.Name),
]
if (rankObj == "best")
rankNum <- 1 else if (rankObj == "worst")
rankNum <- nrow(stateDfr) else suppressWarnings(rankNum <- as.numeric(rankObj))
nameChr <- c(nameChr, stateDfr[rankNum, ]$Hospital.Name)
}
return(data.frame(hospital = nameChr, state = tableDfr$State))
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
rankall <- function(outcomeChr, rankObj = "best") {
outcomeDfr <- Init("Outcome-of-care-measures.csv")
suppressWarnings(outcomeDfr[, 11] <- as.numeric(outcomeDfr[, 11]))
suppressWarnings(outcomeDfr[, 17] <- as.numeric(outcomeDfr[, 17]))
suppressWarnings(outcomeDfr[, 23] <- as.numeric(outcomeDfr[, 23]))
tableDfr <- data.frame(State = names(tapply(outcomeDfr$State, outcomeDfr$State,
length)), Freq = tapply(outcomeDfr$State, outcomeDfr$State, length))
rownames(tableDfr) <- NULL
inputDfr <- data.frame(Outcome = c("heart attack", "heart failure", "pneumonia"),
Col = c(11, 17, 23))
if (nrow(inputDfr[inputDfr$Outcome == outcomeChr, ]) == 0)
stop("invalid outcome")
nameChr <- character(0)
for (stateChr in tableDfr$State) {
stateDfr <- outcomeDfr[outcomeDfr$State == stateChr, ]
colNum <- inputDfr[inputDfr$Outcome == outcomeChr, 2]
stateDfr <- stateDfr[complete.cases(stateDfr[, colNum]), ]
stateDfr <- stateDfr[order(stateDfr[, colNum], stateDfr$Hospital.Name),
]
if (rankObj == "best")
rankNum <- 1 else if (rankObj == "worst")
rankNum <- nrow(stateDfr) else suppressWarnings(rankNum <- as.numeric(rankObj))
nameChr <- c(nameChr, stateDfr[rankNum, ]$Hospital.Name)
}
return(data.frame(hospital = nameChr, state = tableDfr$State))
}
r <- rankall("pneumonia", "worst")
rankall <- function(outcomeChr, rankObj = "best") {
outcomeDfr <- read.csv("/Users/soumyajitsarkar/Desktop/datasciencecoursera/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses="character")
suppressWarnings(outcomeDfr[, 11] <- as.numeric(outcomeDfr[, 11]))
suppressWarnings(outcomeDfr[, 17] <- as.numeric(outcomeDfr[, 17]))
suppressWarnings(outcomeDfr[, 23] <- as.numeric(outcomeDfr[, 23]))
tableDfr <- data.frame(State = names(tapply(outcomeDfr$State, outcomeDfr$State,
length)), Freq = tapply(outcomeDfr$State, outcomeDfr$State, length))
rownames(tableDfr) <- NULL
inputDfr <- data.frame(Outcome = c("heart attack", "heart failure", "pneumonia"),
Col = c(11, 17, 23))
if (nrow(inputDfr[inputDfr$Outcome == outcomeChr, ]) == 0)
stop("invalid outcome")
nameChr <- character(0)
for (stateChr in tableDfr$State) {
stateDfr <- outcomeDfr[outcomeDfr$State == stateChr, ]
colNum <- inputDfr[inputDfr$Outcome == outcomeChr, 2]
stateDfr <- stateDfr[complete.cases(stateDfr[, colNum]), ]
stateDfr <- stateDfr[order(stateDfr[, colNum], stateDfr$Hospital.Name),
]
if (rankObj == "best")
rankNum <- 1 else if (rankObj == "worst")
rankNum <- nrow(stateDfr) else suppressWarnings(rankNum <- as.numeric(rankObj))
nameChr <- c(nameChr, stateDfr[rankNum, ]$Hospital.Name)
}
return(data.frame(hospital = nameChr, state = tableDfr$State))
}
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
g <- read.csv("getdata-data-ss06hid.csv")
g <- read.csv("./getdata-data-ss06hid.csv")
g <- read.csv("../datasciencecoursera/getdata-data-ss06hid.csv")
g <- read.csv("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-ss06hid.csv")
View(g)
g$VAL
k<-g$VAL
l<-is.na(k)
z<-k[!l]
z
z[z>24]
attributes(z)
z[z>=24]
q<-z[z>=24]
q.length
length(q)
g$FES
g$FES
length(g$FES)
install.packages("xlsx")
q<- read.xlsx("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-DATA.gov_NGAP.xlsx")
q<- read.xlsx("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-DATA.gov_NGAP.xlsx")
q<- read.xlsx2("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-DATA.gov_NGAP.xlsx")
q<- read.xlsx2("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-DATA.gov_NGAP.xlsx")
q<- read.xlsx2("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-DATA.gov_NGAP.xlsx")
library(xlsx)
q<- read.xlsx2("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-DATA.gov_NGAP.xlsx")
q<- read.xlsx("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-DATA.gov_NGAP.xlsx")
q<- read.xlsx("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-DATA.gov_NGAP.xlsx",sheet=1)
TRUE  )
q<- read.xlsx("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-DATA.gov_NGAP.xlsx",sheet = 1, header =   TRUE  )
q<- read.xlsx("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-DATA.gov_NGAP.xlsx",sheetname = "" )
library(xlsx)
q<- read.xlsx("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-DATA.gov_NGAP.xlsx",sheetname = "" )
install.packages("XLConnect")
q<- readWorksheet("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-DATA.gov_NGAP.xlsx",sheet = 1)
library(XLConnect)
q<- readWorksheet("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-DATA.gov_NGAP.xlsx",sheet = 1)
q<- readWorksheet("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-DATA.gov_NGAP.xlsx",sheet = 1),sheet = 1, header = TRUE, startCol = 7, startRow = 18, endCol = 15, endRow = 23
q<- readWorksheet("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-DATA.gov_NGAP.xlsx",sheet = 1, header = TRUE, startCol = 7, startRow = 18, endCol = 15, endRow = 23)
q<- readWorksheetFromFile("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-DATA.gov_NGAP.xlsx",sheet = 1, header = TRUE, startCol = 7, startRow = 18, endCol = 15, endRow = 23)
sum(datos2$Zip*datos2$Ext,na.rm=T)
sum(q$Zip*q$Ext,na.rm=T)
install.packages("XML")
library(XML)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileURL,useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileURL,useInternal = T)
library(XML)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileURL,useInternal = T)
doc <- xmlTreeParse(fileURL, useInternal = TRUE)
fileURL <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileURL, useInternal = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode([1][1])
rootNode[[1][1]]
rootNode[1]
zipcode <- xpathSApply(rootNode,"//zipcode",xmlValue)
z<-zipcode[zipcode == 21231]
z
length(z)
x<- read.csv("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-ss06pid.csv")
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
DT<- read.csv("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-data-ss06pid.csv")
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
install.packages("data.table")
library(data.table)
library(data.table)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(rowMeans(DT)[DT$SEX==1])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(),user = "genome",host = "genome-mysql.cse.ucsc.edu")
dbConnect()
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user = "genome",host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;")
dbDisconnect(ucscDb)
result
ucscDb <- dbConnect(MySQL(),user = "genome",db="hg19",host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;")
dbDisconnect(ucscDb)
result
hg19 <- dbConnect(MySQL(),user = "genome",db = "hg19",host = "genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
lenght(allTables)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbListFields(hg19,"affyU133Plus2")
res <- dbGetQuery(hg19,"Select * from affyU133Plus2")
count(res)
res
View(res)
res1 <- dbGetQuery(hg19,"Select count(*) from affyU133Plus2")
View(res1)
dbGetQuery(hg19,"Select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19,"affyU133Plus2")
head(affyData)
dbDisconnect(hg19)
myApp = oauth_app("twitter",key="Ttzcz559Ed302x4vt8aU8UEF0",secret="vS0nsq0AoK77tpxF4hyx1amr1hUrVF2mfDejn1j4Tdq980v8sG")
library(httr)
myApp = oauth_app("twitter",key="Ttzcz559Ed302x4vt8aU8UEF0",secret="vS0nsq0AoK77tpxF4hyx1amr1hUrVF2mfDejn1j4Tdq980v8sG")
sig = sign_auth1.0(myApp,token="128639707-9430fJSq24blssB3wIAjwxgYcXH8HEPtzxqkFVjV",token_secret = "Nsi5L2NCfFPAWyVUCfmQqeLPX2vAuVEOTaUtgNyQtl1Wf")
sig = sign_auth1.0(myApp,token="128639707-9430fJSq24blssB3wIAjwxgYcXH8HEPtzxqkFVjV",token_secret = "Nsi5L2NCfFPAWyVUCfmQqeLPX2vAuVEOTaUtgNyQtl1Wf")
sig = sign_oauth1.0(myApp,token="128639707-9430fJSq24blssB3wIAjwxgYcXH8HEPtzxqkFVjV",token_secret = "Nsi5L2NCfFPAWyVUCfmQqeLPX2vAuVEOTaUtgNyQtl1Wf")
homeTL = GET("https://pi.twitter.com/1.1/statuses/home_timeline.json",sig)
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json",sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json2 = jsonlite::fromJSON(jsonlote::toJSON(json1))
json2 = jsonlite::fromJSON(jsonlite::toJSON(json1))
json2[1,1:4]
data <- read.csv("getdata_wksst8110.for", header=T)
library(RMySQL)
data <- read.csv("getdata_wksst8110.for", header=T)
data <- read.csv("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata_wksst8110.for", header=T)
data <- read.csv("/Users/soumyajitsarkar/Desktop/datasciencecoursera/getdata-wksst8110.for", header=T)
View(data)
filename <- "getdata_wksst8110.for"
df <- read.fwf(file=filename,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
head(df)
sum(df[, 4])
head(data)
dim(data)
file_name <- "getdata_wksst8110.for"
df <- read.fwf(file=file_name,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
View(data)
View(data)
xtabs(q ~ mergedData$Income.Group)
gdpdata <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
gdpdestination <- "gdp.csv"
download.file(gdpdata,gdpdestination,method="curl")
edudata <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
edudestination <- "edu.csv"
download.file(edudata,edudestination,method = "curl")
gdp <- read.csv("gdp.csv",header=F, skip=5, nrows=190)
gdp <- gdp[,c(1,2,4,5)]
edu <- read.csv("edu.csv")
mergedData <- merge(gdp,edu,by.x = "V1",by.y = "CountryCode", sort=T)
mergedData[with(mergedData,order(-V2))]
#Q5
quantile(mergedData$V2,probs = c(0.2,0.4,0.6,0.8,1))
q <- mergedData$V2<=38
xtabs(q ~ mergedData$Income.Group)
d1 = date()
detach("package:methods", unload=TRUE)
detach("package:RMySQL", unload=TRUE)
detach("package:utils", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:datasets", unload=TRUE)
detach("package:DBI", unload=TRUE)
d1 = date()
library("chron", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
d1 = date()
d1 = date()
d1 = Sys.Date()
d1 = Sys.Date()
d1 = Sys.Date()
d1 = Date()
d1 =date()
d1
class(d1)
format(d1,"%a %b %d")
d2 = Sys.Date()
class(d2)
format(d2,"%a %b %d")
format(d2,"%a %b %d %Y")
setwd("/Users/soumyajitsarkar/Desktop/datasciencecoursera/")
setwd("/Users/soumyajitsarkar/Desktop/datasciencecoursera/")
urlData <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
urlData <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
filename<- "ACS2006.csv"
download.file(urlData,filename,method = "curl")
data1<- read.csv("ACS2006.csv")
setwd("/Users/soumyajitsarkar/Desktop/datasciencecoursera/")
urlData <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
filename<- "ACS2006.csv"
download.file(urlData,filename,method = "curl")
data1<- read.csv("ACS2006.csv")
list <- strsplit(names(data1),"wgtp")
list[123]
list1 <- strsplit(names(data1),"wgtp")
list1[123]
list1
gdpURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
filename2 <- "gdpData.csv"
download.file(gdpURL,filename2,method = "curl")
gdpData <- read.csv("gdpData.csv")
View(gdpData)
gdpData <- read.csv("gdpData.csv",nrow=190)
gdpData <- read.csv("gdpData.csv",nrow=190,skip =4)
View(gdpData)
gdpData <- read.csv("gdpData.csv",nrow=190)
View(gdpData)
gdpData <- read.csv("gdpData.csv",nrow=190,skip=4)
View(gdpData)
removeComma <- gsub(",","",gdpData$X.4)
mean(removeComma)
mean(removeComma,na.rm = TRUE)
removeComma <- as.numeric(gsub(",","",gdpData$X.4))
mean(removeComma,na.rm = TRUE)
countrys <- grep("^United",countryNames),
countrys <- grep("^United",gdpData$X.3)
countrys <- grep("^United",gdpData$X.3,value = T)
length(countrys)
eduData <- read.csv("edu.csv")
matchedData <- merge(gdpData,eduData,by.x = "X",by.y = "CountryCode")
View(matchedData)
june <- grep("Fiscal year end: June",matchedData$Special.Notes)
length(june)
View(gdpData)
install.packages("quantmod")
amzn = getSymbols("AMZN",auto.assign=FALSE)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(gdpData)
View(gdpData)
sampleTimes
2012data <- grep("2012-",sampleTimes)
data2012 <- grep("2012-",sampleTimes)
length(data2012)
day <- format(sampleTimes,"%A")
day
monday <- day["Monday"]
monday <- length(grep("Monday",day))
monday <- length(grep("Mond",day))
mondays <- length(grep("Mond",day))
data2012
data2012 <- grep("2012-",sampleTimes,value = T)
day <- format(data2012,"%A")
data2012 <- grep("2012-*",sampleTimes,value = T)
length(data2012)
data2012 <- grep("2012-*",sampleTimes,value = F)
length(data2012)
subsetData2012 <- subset(sampleTimes,data2012)
data2012 <- grep("2012-*",sampleTimes)
length(data2012)
subsetData2012 <- subset(sampleTimes,data2012)
data2012 <- grepl("2012-*",sampleTimes)
length(data2012)
subsetData2012 <- subset(sampleTimes,data2012)
day <- format(subsetData2012,"%A")
table(day)
View(amzn)
